# -*- coding: utf-8 -*-
"""proyectoTRstrimlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-ab1tJuurL1dp7pN3OaV2xiGoKqDOPb0
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import pandas_ta as ta
import mplfinance as mpf
import matplotlib.pyplot as plt
import math
from datetime import datetime

# ==============================
# Funciones auxiliares
# ==============================

def round_price(x, tick=0.01):
    """Redondea precios al tick especificado."""
    return float(math.floor(x / tick) * tick)

def generar_niveles(df, atr_multiplier_stop=3, rr_targets=[2.0, 3.0], pullback_to_sma=True, lookback=30):
    """Genera niveles sugeridos de entrada, stop y objetivos para largos/cortos."""
    last_close = float(df["Close"].iloc[-1])
    atr = float(df["ATR14"].iloc[-1])
    sma50 = float(df["SMA50"].iloc[-1])
    sma200 = float(df["SMA200"].iloc[-1])
    recent_high = float(df["Close"].tail(lookback).max())
    recent_low = float(df["Close"].tail(lookback).min())

    trade_levels = {}

    # Largos
    if sma50 > sma200:
        entry_aggr = last_close
        entry_cons = sma50 if pullback_to_sma else recent_low
        stop_aggr = entry_aggr - atr_multiplier_stop * atr
        stop_cons = entry_cons - atr_multiplier_stop * atr
        risk_aggr = entry_aggr - stop_aggr
        risk_cons = entry_cons - stop_cons
        targets_aggr = [entry_aggr + rr * risk_aggr for rr in rr_targets]
        targets_cons = [entry_cons + rr * risk_cons for rr in rr_targets]
        fib_targets = []
        if recent_high > recent_low:
            move = recent_high - recent_low
            for m in [1.0, 1.272, 1.618]:
                fib_targets.append(recent_high + m * move)

        trade_levels["long"] = {
            "trend": "bull",
            "entry_aggressive": round_price(entry_aggr),
            "stop_aggressive": round_price(stop_aggr),
            "targets_aggressive": [round_price(t) for t in targets_aggr],
            "entry_conservative": round_price(entry_cons),
            "stop_conservative": round_price(stop_cons),
            "targets_conservative": [round_price(t) for t in targets_cons],
            "fib_targets": [round_price(t) for t in fib_targets],
            "recent_low": round_price(recent_low),
            "recent_high": round_price(recent_high),
            "atr": round_price(atr)
        }
    else:
        trade_levels["long"] = {"trend": "not_bull", "note": "No se recomienda entrada larga (SMA50 <= SMA200)"}

    # Cortos
    if sma50 < sma200:
        entry_aggr_s = last_close
        entry_cons_s = sma50 if pullback_to_sma else recent_high
        stop_aggr_s = entry_aggr_s + atr_multiplier_stop * atr
        stop_cons_s = entry_cons_s + atr_multiplier_stop * atr
        risk_aggr_s = stop_aggr_s - entry_aggr_s
        risk_cons_s = stop_cons_s - entry_cons_s
        targets_aggr_s = [entry_aggr_s - rr * risk_aggr_s for rr in rr_targets]
        targets_cons_s = [entry_cons_s - rr * risk_cons_s for rr in rr_targets]
        fib_targets_s = []
        if recent_high > recent_low:
            move = recent_high - recent_low
            for m in [1.0, 1.272, 1.618]:
                fib_targets_s.append(recent_low - m * move)

        trade_levels["short"] = {
            "trend": "bear",
            "entry_aggressive": round_price(entry_aggr_s),
            "stop_aggressive": round_price(stop_aggr_s),
            "targets_aggressive": [round_price(t) for t in targets_aggr_s],
            "entry_conservative": round_price(entry_cons_s),
            "stop_conservative": round_price(stop_cons_s),
            "targets_conservative": [round_price(t) for t in targets_cons_s],
            "fib_targets": [round_price(t) for t in fib_targets_s],
            "recent_low": round_price(recent_low),
            "recent_high": round_price(recent_high),
            "atr": round_price(atr)
        }
    else:
        trade_levels["short"] = {"trend": "not_bear", "note": "No se recomienda entrada corta (SMA50 >= SMA200)"}

    return trade_levels

# ==============================
# Interfaz Streamlit
# ==============================
st.set_page_config(page_title="Trading Signals - SPY", layout="wide")

st.title("üìà Trading Signals - SPY (S&P 500 ETF)")

# Sidebar
st.sidebar.header("Configuraci√≥n")
ticker = st.sidebar.text_input("Ticker", value="SPY")
start_date = st.sidebar.date_input("Fecha de inicio", datetime(2020, 1, 1))
end_date = st.sidebar.date_input("Fecha final", datetime.today())

# Descargar datos
df = yf.download(ticker, start=start_date, end=end_date)

# Calcular indicadores
df["SMA50"] = ta.sma(df["Close"], length=50)
df["SMA200"] = ta.sma(df["Close"], length=200)
df["RSI14"] = ta.rsi(df["Close"], length=14)
df["MACD"] = ta.macd(df["Close"], fast=12, slow=26, signal=9)["MACD_12_26_9"]
df["ATR14"] = ta.atr(df["High"], df["Low"], df["Close"], length=14)

# Generar se√±ales simples
df["Signal"] = ""
df.loc[(df["SMA50"] > df["SMA200"]) & (df["RSI14"] < 30), "Signal"] = "BUY"
df.loc[(df["SMA50"] < df["SMA200"]) & (df["RSI14"] > 70), "Signal"] = "SELL"

# Mostrar m√©tricas clave
st.subheader(f"Resumen de {ticker}")
col1, col2, col3 = st.columns(3)
col1.metric("Precio actual", f"{df['Close'].iloc[-1]:.2f}")
col2.metric("Tendencia", "Alcista" if df["SMA50"].iloc[-1] > df["SMA200"].iloc[-1] else "Bajista")
col3.metric("ATR (14)", f"{df['ATR14'].iloc[-1]:.2f}")

# Mostrar gr√°fica
st.subheader("Gr√°fico de velas con SMA50 y SMA200")
apds = [
    mpf.make_addplot(df["SMA50"], color="blue"),
    mpf.make_addplot(df["SMA200"], color="red"),
]
fig, ax = plt.subplots(figsize=(10, 6))
mpf.plot(df.tail(300), type='candle', style='yahoo', addplot=apds, volume=True, ax=ax)
st.pyplot(fig)

# Mostrar se√±ales recientes
st.subheader("√öltimas se√±ales")
st.dataframe(df.tail(10)[["Close", "SMA50", "SMA200", "RSI14", "Signal"]])

# Mostrar niveles sugeridos con tarjetas
st.subheader("Niveles sugeridos")
niveles = generar_niveles(df)

if niveles["long"]["trend"] == "bull":
    st.success(f"üìä Estrategia Larga (Tendencia Alcista)")
    st.write(f"**Entrada Agresiva:** {niveles['long']['entry_aggressive']}")
    st.write(f"**Stop:** {niveles['long']['stop_aggressive']}")
    st.write(f"**Targets:** {niveles['long']['targets_aggressive']}")
    st.write(f"**Fib Targets:** {niveles['long']['fib_targets']}")
else:
    st.info("‚ÑπÔ∏è No se recomienda entrada larga en este momento.")

if niveles["short"]["trend"] == "bear":
    st.error(f"üìâ Estrategia Corta (Tendencia Bajista)")
    st.write(f"**Entrada Agresiva:** {niveles['short']['entry_aggressive']}")
    st.write(f"**Stop:** {niveles['short']['stop_aggressive']}")
    st.write(f"**Targets:** {niveles['short']['targets_aggressive']}")
    st.write(f"**Fib Targets:** {niveles['short']['fib_targets']}")
else:
    st.info("‚ÑπÔ∏è No se recomienda entrada corta en este momento.")